% =========================================================================
% FUNCTION
% j_dmri_process_dti.m
%
% This script splits 4d diffusion data to get each nex separately. This
% allows to run some bootstraping procedure and evaluate the
% reproducibility of DTI metrics. Data should be in Nifti format. 
% All parameters are saved in the 'dmri' structure.
% Uses FSL and FS tools.
%
% 1. Run mri_convert and copy the outputs in folder A
% 2. Change the path and other parameters and run this script
% 3. Run batch_bedpostx.sh on a UNIX super computer by typing 'source batch_bedpostx.sh'
% 4. Once done, copy the generated .bedpostx folders into folder A
% 5. Load the dmri.mat structure generated by the present script and run 'j_dmri_compute_uncertainty(dmri)'
% 6. Run j_dmri_display_uncertainty(dmri)
% 
% INPUT
% dmri				structure defined as follow (example)
%	 dmri.path				= '/Users/julien/MRI/connectome/05/12ch_1x1x2'; % folder of nifti file
%	 dmri.file_data			= 'data.nii.gz'; % accepts 'nii' and 'nii.gz' formats
%	 dmri.file_bvecs		= 'bvecs';
%	 dmri.file_bvals		= 'bvals';
%	 dmri.nb_volumes_tot	= 15; % number of volumes per nex
%	 dmri.start_volume		= 1; % first volume to consider (indexation starts at 1)
%	 dmri.nex				= 9; % number of averaging
%	 dmri.slice				= 30; % only reconstruct one specific slice (put 0 for all slices). Indexation starts at 1.
%	 dmri.split_bvecs		= 1; % put 1 if the bvecs file has repetitive patterns (in the case of multiple averaging)
%	 dmri.split_bvals		= 1; % put 1 if the bvals file has repetitive patterns (in the case of multiple averaging)
% 
% COMMENTS
% Julien Cohen-Adad 2009-09-05
% =========================================================================
function j_dmri_process_dti(dmri)


% misc
delete_indiv_set	= 0; % delete individual set of data (ni case of multiple averaging)


% =========================================================================
% START THE SCRIPT
% =========================================================================

fprintf('\n\n*** PROCESS DIFFUSION DATA ***\n\n')

% find the input data
j_progress('Find the input data .....................................')
fname = [dmri.path,filesep,dmri.file_data];
if ~exist(fname)
	disp('Data not found. Please check your file name.')
end
j_progress(1)

% Do motion correction
if dmri.moco.do
	j_progress('Run motion correction (MCFLIRT) .........................')
	if ~exist(fname)
		disp('Data not found. Please check your file name.')
	end
	j_progress(1)
end

% Create folders
num = j_numbering(dmri.nex,2,1);
j_progress('Create folders ..........................................')
for i_nex = 1:dmri.nex
	% Build folder name
	dmri.folder_split{i_nex} = strcat(dmri.path,filesep,num{i_nex},filesep);
	% Create folder (if does not exist)
	if ~exist(dmri.folder_split{i_nex})
		mkdir(dmri.folder_split{i_nex});
	end
	% display progress
	j_progress(i_nex/dmri.nex)
end

% Split the bvecs file
j_progress('Split the bvecs file ....................................')
if dmri.split_bvecs
	bvecs_old = textread([dmri.path,filesep,dmri.file_bvecs]);
	bvecs_new = bvecs_old(1:dmri.nb_volumes_tot,:);
	% write a new bvals file
	fid = fopen([dmri.path,filesep,dmri.file_bvecs,'_temp'],'w');
	for i_dir=1:dmri.nb_volumes_tot-dmri.start_volume+1
		fprintf(fid,'%i %i %i\n',bvecs_new(i_dir,:));
	end
	fclose(fid);
else
	copyfile([dmri.path,filesep,dmri.file_bvecs],[dmri.path,filesep,dmri.file_bvecs,'_temp']);
end
j_progress(1)

% Split the bvals file
j_progress('Split the bvals file ....................................')
if dmri.split_bvals
	bvals_old = textread([dmri.path,filesep,dmri.file_bvals]);
	bvals_new = bvals_old(1:dmri.nb_volumes_tot);
	% write a new bvals file
	fid = fopen([dmri.path,filesep,dmri.file_bvals,'_temp'],'w');
	fprintf(fid,'%i\n',bvals_new);
	fclose(fid);
else
	copyfile([dmri.path,filesep,dmri.file_bvals],[dmri.path,filesep,dmri.file_bvals,'_temp']);
end
j_progress(1)

% only get the first nodif volume to get matrix size
j_progress('Load one volume to get matrix size ......................')
cmd = ['fslroi ',fname,' temp 0 1'];
unix(cmd);
hdr = load_nifti('temp.nii.gz');
dmri.nx = hdr.dim(2);
dmri.ny = hdr.dim(3);
if dmri.slice
	dmri.nz = 1;
else
	dmri.nz = hdr.dim(4);
end
dmri.nb_volumes = dmri.nb_volumes_tot-dmri.start_volume+1;
clear hdr
delete 'temp.*';
j_progress(1)

% Split data
j_progress('Split the data ..........................................')
for i_nex = 1:dmri.nex
	% Split the data
	if dmri.slice
		% reconstruct only one slice
		cmd = ['fslroi ',fname,' ',dmri.folder_split{i_nex},'data.nii.gz 0 ',num2str(dmri.nx),' 0 ',num2str(dmri.ny),' ',num2str(dmri.slice-1),' 1 ',num2str(dmri.nb_volumes_tot*(i_nex-1)+dmri.start_volume-1),' ',num2str(dmri.nb_volumes)];
	else
		% reconstruct all slices
		cmd = ['fslroi ',fname,' ',dmri.folder_split{i_nex},'data.nii.gz ',num2str(dmri.nb_volumes_tot*(i_nex-1)+dmri.start_volume-1),' ',num2str(dmri.nb_volumes)];
	end
	unix(cmd);
	% display progress
	j_progress(i_nex/dmri.nex)
end
save([dmri.path,filesep,'dmri'],'dmri');

% Average data
j_progress('Average the data ........................................')
for i_nex = 1:dmri.nex
	nb_averaging = i_nex;
	data = zeros(dmri.nx,dmri.ny,dmri.nz,dmri.nb_volumes,nb_averaging);
	for i_averaging = 1:nb_averaging
% 		[data(:,:,:,:,i_averaging) hdr] = j_mri_read([dmri.folder_split{i_averaging},'data']);
		nifti{i_averaging} = load_nifti([dmri.folder_split{i_averaging},'data.nii.gz']);
% 		data(:,:,:,:,i_averaging) = nifti{i_averaging}.vol;
	end
	% create folder (if does not exist)
	dmri.folder_average{i_nex} = strcat(dmri.path,filesep,'average_',num{1},'-',num{nb_averaging},filesep);
	if ~exist(dmri.folder_average{i_nex})
		mkdir(dmri.folder_average{i_nex});
	end
	% average data
	if length(size(data))==5
		data_mean = mean(data,5);
	else
		data_mean = data;
		clear data
	end
	% write data
	warning off % to prevent message about format conversion
	nifti{1}.vol = data_mean;
	save_nifti(nifti{1},[dmri.folder_average{i_nex},'data.nii']);
	warning on % to prevent message about format conversion
	% display progress
	j_progress(i_nex/dmri.nex)
end

% Copy b-matrix file
j_progress('Copy b-matrix into each folder ..........................')
for i_nex = 1:dmri.nex
	copyfile([dmri.path,filesep,dmri.file_bvecs,'_temp'],[dmri.folder_average{i_nex},'bvecs']);
	copyfile([dmri.path,filesep,dmri.file_bvals,'_temp'],[dmri.folder_average{i_nex},'bvals']);
	j_progress(i_nex/dmri.nex)
end

% create nodif volume on the first folder
j_progress('Extract B0 from the 1st serie ...........................')
dmri.fname_nodif = [dmri.path,filesep,'nodif.nii.gz'];
cmd = ['fslroi ',dmri.folder_split{1},'data.nii.gz ',dmri.fname_nodif,' 0 1'];
unix(cmd);
j_progress(1)

% create mask using BET
j_progress('Create mask .............................................')
cmd = ['bet ',dmri.fname_nodif,' ',dmri.path,filesep,'nodif_brain.nii.gz',' -m -f 0.2'];
unix(cmd);
dmri.fname_mask = [dmri.path,filesep,'nodif_brain_mask.nii.gz'];
j_progress(1)

% Copy mask in each folder
j_progress('Copy mask in each folder ................................')
for i_nex = 1:dmri.nex
	copyfile(dmri.fname_mask,[dmri.folder_average{i_nex},'nodif_brain_mask.nii.gz']);
	j_progress(i_nex/dmri.nex)
end

% Estimate the tensors
% for i_nex = 1:dmri.nex
% 	fprintf('Estimate the tensors for acquisition #%i\n',i_nex)
% 	cmd = ['dtifit -k ',dmri.folder_split{i_nex},'data.nii.gz',...
% 		' -m ',dmri.folder_split{i_nex},'nodif_brain_mask.nii.gz',...
% 		' -o ',dmri.folder_split{i_nex},'dti',...
% 		' -r ',dmri.folder_split{i_nex},'bvecs',...
% 		' -b ',dmri.folder_split{i_nex},'bvals'];
% 	unix(cmd);
% end
for i_nex = 1:dmri.nex
	fprintf('Estimate the tensors for nav = %i\n',i_nex)
	cmd = ['dtifit -k ',dmri.folder_average{i_nex},'data.nii.gz',...
		' -m ',dmri.folder_average{i_nex},'nodif_brain_mask.nii.gz',...
		' -o ',dmri.folder_average{i_nex},'dti',...
		' -r ',dmri.folder_average{i_nex},'bvecs',...
		' -b ',dmri.folder_average{i_nex},'bvals'];
	unix(cmd);
end

% Generate shell scripts to launch BEDPOSTX on super-computer
j_progress('Generate batch to run BedpostX ..........................')
fname_batch = [dmri.path,filesep,'batch_bedpostx.sh'];
fid = fopen(fname_batch,'w');
for i_nex = 1:dmri.nex
	fprintf(fid,'echo ******************************************\n');
	fprintf(fid,'echo * Process series %s ...\n',['average_01-',num{i_nex}]);
	fprintf(fid,'echo ******************************************\n');
	fprintf(fid,'bedpostx %s -n 1\n',['average_01-',num{i_nex}]);
	j_progress(i_nex/dmri.nex)
end
fclose(fid);
j_progress(1)

% Delete temp files
j_progress('Delete temp files .......................................')
delete([dmri.path,filesep,dmri.file_bvecs,'_temp']);	
delete([dmri.path,filesep,dmri.file_bvals,'_temp']);
delete([dmri.path,filesep,'nodif.nii.gz']);
delete([dmri.path,filesep,'nodif_brain.nii.gz']);
delete([dmri.path,filesep,'nodif_brain_mask.nii.gz']);
if delete_indiv_set
	for i_dir = 1:nb_averaging
		rmdir(dmri.folder_split{i_dir},'s');
	end
end
j_progress(1)

% save structure
j_progress('Save structure ..........................................')
save([dmri.path,filesep,'dmri'],'dmri');
j_progress(1)

% generate FA
j_progress('Generate pretty pictures ................................')
j_dmri_display_fa(dmri)

% Compute RMSE
j_dmri_compute_rmse(dmri)


