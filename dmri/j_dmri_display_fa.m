% =========================================================================
% FUNCTION
% j_dmri_display_fa.m
%
% Generate pretty pictures. 
%
% INPUT
% diff				structure generated by j_dmri_process_dti.m
% 
% OUTPUT
% (-)
%
% COMMENTS
% Julien Cohen-Adad 2009-09-04
% =========================================================================
function j_dmri_display_fa(diff)

slice		= 11;
txt			= '32ch 1x1x2';

for i_nex = 1:diff.nex
	
	% Load FA
	fa3d = load_nifti([diff.folder_average{i_nex},filesep,'dti_FA.nii.gz']);
	fa3d = fa3d.vol;
	if ~diff.slice
		fa = fa3d(:,:,slice);
	else
		fa = squeeze(fa3d);
	end

	% create image
	h_fig = figure;
	h_img = imagesc(flipud(fliplr(fa')),[0 1]);
	axis image
	axis off
% 	colorbar
	colormap gray
	[a b c]=fileparts(diff.path);
% 	title({['\bfFA for the ',txt];['NAV = ',num2str(i_nex)]})
	
	% print figure
	print(h_fig,'-dpng','-r150',[diff.path,filesep,'fig_fa_nav',num2str(i_nex),'.png']);

	close 
end



for i_nex = 1:diff.nex
	
	% Load colormap
	v13d = load_nifti([diff.folder_average{i_nex},filesep,'dti_V1.nii.gz']);
	v13d = v13d.vol;
	if ~diff.slice
		v1 = squeeze(v13d(:,:,slice,:));
	else
		v1 = squeeze(v13d);
	end

	facol = zeros(diff.nx,diff.ny,3);
	for i=1:3
		% modulate by FA
		facol(:,:,i) = v1(:,:,i).*fa;
		% get absolute value
		facol(:,:,i) = abs(facol(:,:,i));
		% rotate
		facol(:,:,i) = facol(:,:,i)';
		% flip
		facol(:,:,i) = flipud(facol(:,:,i));
		facol(:,:,i) = fliplr(facol(:,:,i));
		% truncate to 1
		trunc = facol(:,:,i)<=1;
		facol(:,:,i) = facol(:,:,i).*trunc;
		trunc_inv = facol(:,:,i)>1;
		facol(:,:,i) = facol(:,:,i)+trunc_inv;
	end

	% create image
	h_fig = figure;
	imagesc(facol,[0 1])
	axis image
	axis off
	title(['FA colormap for NAV = ',num2str(i_nex)])
	
	% print figure
	print(h_fig,'-dpng','-r150',[diff.path,filesep,'fig_fa_colormap_nav',num2str(i_nex),'.png']);

	close 
end



